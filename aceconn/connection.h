#ifndef _SQL_CONNECTION_H_
#define _SQL_CONNECTION_H_

#include <map>

#include "warning.h"
#include "sqlstring.h"
#include "variant.h"

/*
    Options used on ConnectOptionsMap
*/

/*
    Connect related
*/
#define OPT_HOSTNAME    "hostName"
#define OPT_USERNAME    "userName"
#define OPT_PASSWORD    "password"
#define OPT_PORT        "port"
#define OPT_SOCKET      "socket"
#define OPT_SCHEMA      "schema"

/*
    SSL related
*/
#define OPT_SSL_MODE                "ssl-mode"
#define OPT_SSL_KEY                 "ssl-key"
#define OPT_SSL_CERT                "ssl-cert"
#define OPT_SSL_CA                  "ssl-ca"
#define OPT_SSL_CAPATH              "ssl-capath"
#define OPT_SSL_CIPHER              "ssl-cipher"
#define OPT_SSL_CRL                 "ssl-crl"
#define OPT_SSL_CRLPATH             "ssl-crlpath"
#define OPT_SSL_SERVER_PUBLIC_KEY   "rsaKey"
#define OPT_TLS_VERSION             "tls-version"

/*
    Connection related
*/
#define OPT_RECONNECT           "OPT_RECONNECT"
#define OPT_RETRY_COUNT         "OPT_RETRY_COUNT"
#define OPT_CONNECT_TIMEOUT     "OPT_CONNECT_TIMEOUT"
#define OPT_READ_TIMEOUT        "OPT_READ_TIMEOUT"
#define OPT_WRITE_TIMEOUT       "OPT_WRITE_TIMEOUT"
#define OPT_MAX_ALLOWED_PACKET  "OPT_MAX_ALLOWED_PACKET"
#define OPT_NET_BUFFER_LENGTH   "OPT_NET_BUFFER_LENGTH"

/*
    Connection Attributes
*/
#define OPT_CONNECT_ATTR_ADD    "OPT_CONNECT_ATTR_ADD"
#define OPT_CONNECT_ATTR_DELETE "OPT_CONNECT_ATTR_DELETE"
#define OPT_CONNECT_ATTR_RESET  "OPT_CONNECT_ATTR_RESET"

/*
    Authentication
*/
#define OPT_ENABLE_CLEARTEXT_PLUGIN         "OPT_ENABLE_CLEARTEXT_PLUGIN"
#define OPT_CAN_HANDLE_EXPIRED_PASSWORDS    "OPT_CAN_HANDLE_EXPIRED_PASSWORDS"
#define OPT_GET_SERVER_PUBLIC_KEY           "OPT_GET_SERVER_PUBLIC_KEY"
#define OPT_LEGACY_AUTH                     "useLegacyAuth"
#define OPT_DEFAULT_AUTH                    "defaultAuth"

/*
    Character set results and Metadata
*/
#define OPT_CHARACTER_SET_RESULTS           "characterSetResults"
#define OPT_OPTIONAL_RESULTSET_METADATA     "OPT_OPTIONAL_RESULTSET_METADATA"
#define OPT_REPORT_DATA_TRUNCATION          "OPT_REPORT_DATA_TRUNCATION"
#define OPT_CHARSET_NAME                    "OPT_CHARSET_NAME"
#define OPT_DEFAULT_STMT_RESULT_TYPE        "defaultStatementResultType"

/*
    Client side options
*/
#define OPT_CLIENT_COMPRESS             "CLIENT_COMPRESS"
#define OPT_CLIENT_FOUND_ROWS           "CLIENT_FOUND_ROWS"
#define OPT_CLIENT_IGNORE_SIGPIPE       "CLIENT_IGNORE_SIGPIPE"
#define OPT_CLIENT_IGNORE_SPACE         "CLIENT_IGNORE_SPACE"
#define OPT_CLIENT_INTERACTIVE          "CLIENT_INTERACTIVE"
#define OPT_CLIENT_LOCAL_FILES          "CLIENT_LOCAL_FILES"
#define OPT_CLIENT_MULTI_STATEMENTS     "CLIENT_MULTI_STATEMENTS"
#define OPT_CLIENT_NO_SCHEMA            "CLIENT_NO_SCHEMA"
#define OPT_SET_CHARSET_DIR             "charsetDir"
#define OPT_PLUGIN_DIR                  "pluginDir"
#define OPT_READ_DEFAULT_GROUP          "readDefaultGroup"
#define OPT_READ_DEFAULT_FILE           "readDefaultFile"

/*
    Auth plugin options
*/
#define OPT_OCI_CONFIG_FILE "OPT_OCI_CONFIG_FILE"
#define OPT_AUTHENTICATION_KERBEROS_CLIENT_MODE \
    "OPT_AUTHENTICATION_KERBEROS_CLIENT_MODE"


typedef Variant ConnectPropertyVal;

typedef std::map<SQLString, ConnectPropertyVal> ConnectOptionsMap;

class DatabaseMetaData;
class PreparedStatement;
class Statement;
class Driver;

typedef enum transaction_isolation {
    TRANSACTION_NONE = 0,
    TRANSACTION_READ_COMMITTED,
    TRANSACTION_READ_UNCOMMITTED,
    TRANSACTION_REPEATABLE_ZERO,
    TRANSACTION_SERIALIZABLE
} enum_transaction_isolation;

enum ssl_mode {
    SSL_MODE_DISABLED = 1,
    SSL_MODE_PREFERRED,
    SSL_MODE_REQUIRED,
    SSL_MODE_VERIFY_CA,
    SSL_MODE_VERIFY_IDENTITY
};

class Savepoint {

private:
    Savepoint(const Savepoint &);
    void operator=(Savepoint &);

public:
    Savepoint() {};
    virtual ~Savepoint() {};
    virtual int getSavepointId() = 0;
    virtual SQLString getSavepointName() = 0;
};

class Connection {

private:
    Connection(const Connection &);
    void operator=(Connection &);

public:
    Connection() {};

    virtual ~Connection() {};

    virtual Statement *createStatement() = 0;

    virtual void close() = 0;

    virtual void commit() = 0;

    virtual bool getAutoCommit() = 0;

    virtual Driver* getDriver() = 0;

    virtual SQLString getSchema() = 0;

    virtual SQLString getClientOption(const SQLString& optionName) = 0;

    virtual DatabaseMetaData* getMetaData() = 0;

    virtual const SQLWarning *getWarnings() = 0;

    virtual bool isClosed() = 0;

    virtual bool isReadOnly() = 0;

    virtual bool isValid() = 0;

    virtual bool reconnect() = 0;

    virtual PreparedStatement* prepareStatement(const SQLString& sql) = 0;
    virtual PreparedStatement* prepareStatement(const SQLString& sql, int autoGeneratedKeys) = 0;
    virtual PreparedStatement* prepareStatement(const SQLString& sql, SQLString columnNames[]) = 0;

    virtual void releaseSavepoint(Savepoint* savepoint) = 0;

    virtual void rollback() = 0;

    virtual void rollback(Savepoint* savepoint) = 0;

    virtual void setAutoCommit(bool autoCommit) = 0;

    virtual void setSchema(const SQLString& catalog) = 0;

    virtual Connection *setClientOption(const SQLString& optionName, const SQLString& optionValue) = 0;

    virtual Connection *setClientOption(const SQLString& optionName, const void* optionValue) = 0;

    virtual void setReadOnly(bool readOnly) = 0;

    virtual Savepoint *setSavepoint() = 0;

    virtual Savepoint *setSavepoint(const SQLString& name) = 0;

    virtual void setTransactionIsolation(enum_transaction_isolation level) = 0;
};

#endif
