#ifndef _MYSQL_CONNECTION_H_
#define _MYSQL_CONNECTION_H_

#include <ace/Refcounted_Auto_Ptr.h>
#include <ace/Auto_Ptr.h>
#include <aceconn/connection.h>
#include <memory>
#include <map>

class MySQL_DebugLogger;
class MySQL_Statement;
struct MySQL_ConnectionData;

class ConnectionWrapper;

class MySQL_Savepoint : public Savepoint {

    SQLString name;

public:
    MySQL_Savepoint(const SQLString& savepoint);
    virtual ~MySQL_Savepoint();

    int getSavepointId();
    SQLString getSavepointName();

private:
    MySQL_Savepoint(const MySQL_Savepoint&);
    void operator=(MySQL_Savepoint&);

};

class MySQL_Connection {

public:
    MySQL_Connection(Driver* driver,
                     ConnectionWrapper& proxy,
                     SQLString& hostName,
                     SQLString& userName,
                     SQLString& password);

    MySQL_Connection(Driver* driver,
                     ConnectionWrapper& proxy,
                     std::map<SQLString, ConnectionWrapper>& options);

    virtual ~MySQL_Connection();

    Statement *createStatement();

    void close();

    void commit();

    bool getAutoCommit();

    Driver* getDriver();

    SQLString getSchema();

    SQLString getClientOption(const SQLString& optionName);

    DatabaseMetaData* getMetaData();

    const SQLWarning *getWarnings();

    bool isClosed();

    bool isReadOnly();

    bool isValid();

    bool reconnect();

    PreparedStatement* prepareStatement(const SQLString& sql);
    PreparedStatement* prepareStatement(const SQLString& sql, int autoGeneratedKeys);
    PreparedStatement* prepareStatement(const SQLString& sql, SQLString columnNames[]);

    void releaseSavepoint(Savepoint* savepoint);

    void rollback();

    void rollback(Savepoint* savepoint);

    void setAutoCommit(bool autoCommit);

    void setSchema(const SQLString& catalog);

    Connection *setClientOption(const SQLString& optionName, const SQLString& optionValue);

    Connection *setClientOption(const SQLString& optionName, const void* optionValue);

    void setReadOnly(bool readOnly);

    Savepoint *setSavepoint();

    Savepoint *setSavepoint(const SQLString& name);

    void setTransactionIsolation(TRANSACTION_ISOLATION level);

private:
    Driver* driver;
    ACE_Refcounted_Auto_Ptr<ConnectionWrapper, ACE_Lock> proxy;

    /*
        'pimpl pattern' : 
            it is implemented by a seperate helper class that to
        execute queries initiated by driver via statement handle
    */
    ACE_Auto_Ptr<MySQL_Statement> service;
    ACE_Auto_Ptr<MySQL_ConnectionData> intern;

    void init(std::map<SQLString, ConnectPropertyVal>& properties);

    MySQL_Connection(const MySQL_Connection&);
    void operator=(MySQL_Connection&);
};

#endif  // _MYSQL_CONNECTION_H_